//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.Datas
{

/// <summary>
/// 装备
/// </summary>
public abstract partial class Equip :  Bright.Config.BeanBase 
{
    public Equip(JSONNode _json) 
    {
        { if(!_json["Id"].IsNumber) { throw new SerializationException(); }  Id = _json["Id"]; }
        { if(!_json["Color"].IsNumber) { throw new SerializationException(); }  Color = (Constants.Color)_json["Color"].AsInt; }
        { if(!_json["Quality"].IsNumber) { throw new SerializationException(); }  Quality = (Constants.Quality)_json["Quality"].AsInt; }
        { if(!_json["Name"].IsString) { throw new SerializationException(); }  Name = _json["Name"]; }
        PostInit();
    }

    public Equip(int Id, Constants.Color Color, Constants.Quality Quality, string Name ) 
    {
        this.Id = Id;
        this.Color = Color;
        this.Quality = Quality;
        this.Name = Name;
        PostInit();
    }

    public static Equip DeserializeEquip(JSONNode _json)
    {
        string type = _json["__type__"];
        switch (type)
        {
            case "Weapon": return new Datas.Weapon(_json);
            default: throw new SerializationException();
        }
    }

    /// <summary>
    /// ID
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 颜色
    /// </summary>
    public Constants.Color Color { get; private set; }
    /// <summary>
    /// 品质
    /// </summary>
    public Constants.Quality Quality { get; private set; }
    /// <summary>
    /// 装备名称
    /// </summary>
    public string Name { get; private set; }


    public virtual void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public virtual void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Color:" + Color + ","
        + "Quality:" + Quality + ","
        + "Name:" + Name + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
